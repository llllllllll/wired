#!/usr/bin/env python
import subprocess
import sys

template = """\
wired
=====

wip

compile time fixed point scalars and arrays for C++17

Example
-------

.. code-block:: c++

{test_src}

.. code-block::

   $ ./a.out
{test_out}

``protocol7``
-------------

``wired`` also comes with utilities for reading and writing data files in a
custom format called ``protocol7``. A ``protocol7`` file is a valid C++17
header file which defines a namespace holding some number of
``wired::array``\s. ``wired`` comes with a utility, ``csv2p7`` to generate a
``protocol7`` file from a csv. The resulting ``protocol7`` file contains a
single 2d ``wired::array`` with no column labels.

Example
```````

.. code-block::

   $ cat {csv_name}
{csv_contents}
   $ bin/csv2p7 data {csv_name}

.. code-block:: c++
{csv2p7_example}

Full Usage
``````````

.. code-block::

   $ bin/csv2p7 --help
{csv2p7_help}
"""


def indent(text):
    return '\n'.join(
        ('   ' + line) if line else '' for line in text.splitlines()
    )


def main(argv):
    def error(msg, returncode=1):
        print('{}: {}'.format(argv[0], msg), file=sys.stderr)
        exit(returncode)

    try:
        srcfile, test, csv2p7, test_csv = argv[1:]
    except ValueError:
        error('expected exactly 4 arguments')

    def runproc(*args):
        result = subprocess.run(args, stdout=subprocess.PIPE)
        if result.returncode:
            error(
                '{} exited with {}'.format(' '.join(args), result.returncode),
                result.returncode,
            )
        return result.stdout.decode('ascii')

    with open(srcfile) as f:
        src = indent(f.read())

    with open(test_csv) as f:
        csv_contents = indent(f.read())

    print(
        template.format(
            test_src=src,
            test_out=indent(runproc(test)),
            csv_name=test_csv,
            csv_contents=csv_contents,
            csv2p7_example=indent(runproc(csv2p7, 'data', test_csv)),
            csv2p7_help=indent(runproc(csv2p7, '--help')),
        ),
        end='',
    )


if __name__ == '__main__':
    main(sys.argv)
